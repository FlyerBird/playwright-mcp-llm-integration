#!/usr/bin/env node
// cli.js
import { TestRunner } from './src/test-runner.js';
import readline from 'readline';

class TestCLI {
  constructor() {
    this.runner = new TestRunner({
      headless: false,
      slowMo: 1500,
      saveResults: true
    });
    
    this.defaultContext = {
      baseUrl: "https://www.saucedemo.com",
      credentials: {
        username: "standard_user",
        password: "secret_sauce"
      }
    };
    
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      prompt: 'ü§ñ Test> '
    });
  }

  /**
   * Inicia la interfaz CLI
   */
  async start() {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üé≠ PLAYWRIGHT LLM TESTER                  ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Escribe tests en lenguaje natural y ve c√≥mo se ejecutan!   ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Ejemplos:                                                   ‚ïë
‚ïë  ‚Ä¢ login to saucedemo                                        ‚ïë
‚ïë  ‚Ä¢ add backpack to cart                                      ‚ïë
‚ïë  ‚Ä¢ complete checkout process                                 ‚ïë
‚ïë  ‚Ä¢ verify inventory page loads                               ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Comandos especiales:                                        ‚ïë
‚ïë  ‚Ä¢ /help - Mostrar ayuda                                     ‚ïë
‚ïë  ‚Ä¢ /context - Ver contexto actual                            ‚ïë
‚ïë  ‚Ä¢ /exit - Salir                                             ‚ïë
‚ïë  ‚Ä¢ /multiple - Ejecutar m√∫ltiples tests                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

    this.rl.prompt();
    
    this.rl.on('line', async (input) => {
      const command = input.trim();
      
      if (!command) {
        this.rl.prompt();
        return;
      }
      
      await this.handleCommand(command);
      this.rl.prompt();
    });
    
    this.rl.on('close', async () => {
      console.log('\nüëã ¬°Hasta luego!');
      await this.runner.close();
      process.exit(0);
    });
  }

  /**
   * Maneja comandos del usuario
   */
  async handleCommand(command) {
    try {
      // Comandos especiales
      if (command.startsWith('/')) {
        return await this.handleSpecialCommand(command);
      }
      
      // Test normal
      console.log(`\nüéØ Ejecutando: "${command}"`);
      const result = await this.runner.runTest(command, this.defaultContext);
      
      if (result.success) {
        console.log(`\nüéâ ¬°Test completado exitosamente!`);
      } else {
        console.log(`\nüíî Test fall√≥. Revisa los detalles arriba.`);
      }
      
    } catch (error) {
      console.log(`\n‚ùå Error: ${error.message}`);
    }
  }

  /**
   * Maneja comandos especiales
   */
  async handleSpecialCommand(command) {
    const [cmd, ...args] = command.slice(1).split(' ');
    
    switch (cmd.toLowerCase()) {
      case 'help':
        this.showHelp();
        break;
        
      case 'context':
        this.showContext();
        break;
        
      case 'exit':
      case 'quit':
        console.log('\nüëã Cerrando...');
        await this.runner.close();
        process.exit(0);
        break;
        
      case 'multiple':
        await this.runMultipleTests();
        break;
        
      case 'examples':
        this.showExamples();
        break;
        
      case 'config':
        await this.configureSettings();
        break;
        
      default:
        console.log(`\n‚ùì Comando desconocido: ${cmd}`);
        console.log('üí° Usa /help para ver comandos disponibles');
    }
  }

  /**
   * Muestra ayuda
   */
  showHelp() {
    console.log(`
üìö AYUDA - COMANDOS DISPONIBLES:

üé≠ Tests normales:
  Simplemente escribe lo que quieres hacer en espa√±ol:
  
  ‚Ä¢ "login to saucedemo"
  ‚Ä¢ "add backpack to cart"
  ‚Ä¢ "complete checkout with fake info"
  ‚Ä¢ "verify cart has 2 items"
  ‚Ä¢ "logout from application"

üîß Comandos especiales:
  /help         - Mostrar esta ayuda
  /context      - Ver configuraci√≥n actual
  /examples     - Ver m√°s ejemplos de tests
  /multiple     - Ejecutar varios tests seguidos
  /config       - Cambiar configuraci√≥n
  /exit         - Salir del programa

üí° Consejos:
  ‚Ä¢ S√© espec√≠fico pero natural: "login with standard user"
  ‚Ä¢ El LLM entiende contexto: "despu√©s agrega una camiseta"
  ‚Ä¢ Si algo falla, intenta reformular la descripci√≥n
`);
  }

  /**
   * Muestra contexto actual
   */
  showContext() {
    console.log(`
‚öôÔ∏è CONTEXTO ACTUAL:

üåê URL Base: ${this.defaultContext.baseUrl}
üë§ Usuario: ${this.defaultContext.credentials.username}
üîë Password: ${this.defaultContext.credentials.password}

üé≠ Configuraci√≥n Playwright:
‚Ä¢ Modo headless: ${this.runner.testExecutor.options.headless ? 'S√≠' : 'No'}
‚Ä¢ Velocidad: ${this.runner.testExecutor.options.slowMo}ms entre acciones
‚Ä¢ Screenshots: ${this.runner.testExecutor.options.screenshotDir}

ü§ñ LLM:
‚Ä¢ Modelo: llama3.1:8b (Ollama local)
‚Ä¢ Servidor: http://localhost:11434
`);
  }

  /**
   * Muestra ejemplos
   */
  showExamples() {
    console.log(`
üéØ EJEMPLOS DE TESTS:

üîê Autenticaci√≥n:
  ‚Ä¢ "login to saucedemo"
  ‚Ä¢ "login with standard user credentials"
  ‚Ä¢ "logout from the application"

üõí Carrito de compras:
  ‚Ä¢ "add backpack to cart"
  ‚Ä¢ "add 3 items to cart"
  ‚Ä¢ "remove item from cart"
  ‚Ä¢ "verify cart has 2 items"

üí≥ Checkout:
  ‚Ä¢ "complete checkout process"
  ‚Ä¢ "fill checkout form with fake data"
  ‚Ä¢ "complete purchase with John Doe info"

üîç Verificaciones:
  ‚Ä¢ "verify login page loads correctly"
  ‚Ä¢ "check inventory page shows 6 products"
  ‚Ä¢ "verify user is logged in"

üé≠ Navegaci√≥n:
  ‚Ä¢ "go to inventory page"
  ‚Ä¢ "open product details for backpack"
  ‚Ä¢ "navigate to cart page"

üí° Combina acciones:
  ‚Ä¢ "login and add backpack to cart"
  ‚Ä¢ "complete full purchase flow with test data"
  ‚Ä¢ "login, add 2 items, and checkout"
`);
  }

  /**
   * Ejecuta m√∫ltiples tests
   */
  async runMultipleTests() {
    console.log('\nüéØ MODO M√öLTIPLES TESTS');
    console.log('Escribe un test por l√≠nea. L√≠nea vac√≠a para ejecutar todos.');
    console.log('Ejemplo:');
    console.log('  login to saucedemo');
    console.log('  add backpack to cart');
    console.log('  complete checkout');
    console.log('  [l√≠nea vac√≠a para ejecutar]');
    console.log('\nüìù Escribe los tests:');
    
    const tests = [];
    
    const multiRL = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      prompt: '  Test> '
    });
    
    multiRL.prompt();
    
    return new Promise((resolve) => {
      multiRL.on('line', async (input) => {
        const test = input.trim();
        
        if (!test) {
          // L√≠nea vac√≠a - ejecutar todos los tests
          if (tests.length > 0) {
            console.log(`\nüöÄ Ejecutando ${tests.length} tests...`);
            multiRL.close();
            
            const results = await this.runner.runMultipleTests(tests, this.defaultContext);
            console.log(`\nüéâ M√∫ltiples tests completados!`);
            resolve(results);
          } else {
            console.log('‚ùì No hay tests para ejecutar');
            multiRL.close();
            resolve(null);
          }
          return;
        }
        
        tests.push(test);
        console.log(`‚úÖ Agregado: "${test}"`);
        multiRL.prompt();
      });
      
      multiRL.on('close', () => {
        resolve(null);
      });
    });
  }

  /**
   * Configurar ajustes
   */
  async configureSettings() {
    console.log('\n‚öôÔ∏è CONFIGURACI√ìN (pr√≥ximamente...)');
    console.log('üí° Por ahora edita cli.js para cambiar configuraci√≥n');
  }
}

// Ejecutar CLI si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  const cli = new TestCLI();
  
  // Manejar Ctrl+C
  process.on('SIGINT', async () => {
    console.log('\n\n‚èπÔ∏è Interrumpido por usuario');
    await cli.runner.close();
    process.exit(0);
  });
  
  // Iniciar CLI
  cli.start().catch(console.error);
}

export { TestCLI };